{
  "openapi": "3.0.0",
  "info": {
    "title": "Hello Kitchen Back-end",
    "description": "Documentation of the Hello Kitchen's back-end API",
    "version": "1.4.3"
  },
  "servers": [
    {
      "url": "http://localhost:{port}/api",
      "description": "Local development server",
      "variables": {
        "port": {
          "description": "Local port",
          "default": "3000"
        }
      }
    },
    {
      "url": "https://vps-8a0c228a.vps.ovh.ca:3000/api",
      "description": "Canadian VPS"
    },
    {
      "url": "https://vps-e98b74b5.vps.ovh.net:3000/api",
      "description": "UK VPS"
    }
  ],
  "paths": {
    "/{restaurant_id}/details": {
      "summary": "Restaurant's details paths",
      "get": {
        "tags": [
          "Details"
        ],
        "summary": "Get restaurant's details",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/details"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant's ID not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Details"
        ],
        "summary": "Create a new detail",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Detail to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/details"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SuccessfullCreation"
          },
          "400": {
            "description": "Restaurant's ID or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/details/{id}": {
      "summary": "Restaurant's detail paths",
      "get": {
        "tags": [
          "Details"
        ],
        "summary": "Get specific details",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the detail",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/details"
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID or detail's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or detail not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Details"
        ],
        "summary": "Edit an existing detail",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the detail",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Detail to be edited",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/details"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID, detail's ID, or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or detail not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Details"
        ],
        "summary": "Delete an existing detail",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the detail",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID or detail's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or detail not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/food": {
      "summary": "Restaurant's food paths",
      "get": {
        "tags": [
          "Food"
        ],
        "summary": "Get all restaurant's foods",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "foodCategory",
            "in": "query",
            "description": "Filter food by category",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/food"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Food"
        ],
        "summary": "Create a new food",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Food to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/food"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SuccessfullCreation"
          },
          "400": {
            "description": "Restaurant's ID or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or food not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/food/{id}": {
      "summary": "Restaurant's food paths",
      "get": {
        "tags": [
          "Food"
        ],
        "summary": "Get specific food",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the food",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "useCase",
            "in": "query",
            "description": "specific return for POS or KDS",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "POS"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/food"
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID or food's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or food not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Food"
        ],
        "summary": "Edit an existing food",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the food",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Food to be edited",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/food"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID, food's ID, or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or food not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Food"
        ],
        "summary": "Delete an existing food",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the food",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID or food's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or food not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/food_category": {
      "summary": "Restaurant's food categories paths",
      "get": {
        "tags": [
          "Food Category"
        ],
        "summary": "Get all restaurant's food categories",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/food_category"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Food Category"
        ],
        "summary": "Create a new food category",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Food category to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/food_category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SuccessfullCreation"
          },
          "400": {
            "description": "Restaurant's ID or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or food_category not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/food_category/{id}": {
      "summary": "Restaurant's food category paths",
      "get": {
        "tags": [
          "Food Category"
        ],
        "summary": "Get specific food category",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the food category",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/food_category"
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID or food_category' ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or food_category not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Food Category"
        ],
        "summary": "Edit an existing food category",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the food category",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Food category to be edited",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/food_category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID, food_category' ID, or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or food_category not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Food Category"
        ],
        "summary": "Delete an existing food category",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the food category",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID or food_category' ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or food_category not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/ingredient": {
      "summary": "Restaurant's ingredients paths",
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Get all restaurant's ingredients",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ingredients"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Create a new ingredient",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Ingredient to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ingredients"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SuccessfullCreation"
          },
          "400": {
            "description": "Restaurant's ID or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or ingredient not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/ingredient/{id}": {
      "summary": "Restaurant's ingredients paths",
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Get specific ingredient",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ingredient",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ingredients"
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID or ingredient's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or ingredient not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Edit an existing ingredient",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ingredient",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Ingredient to be edited",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ingredients"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID, ingredient's ID, or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or ingredient not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Delete an existing ingredient",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ingredient",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID or ingredient's ID error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or ingredient not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/login": {
      "summary": "Restaurant's food paths",
      "get": {
        "tags": [
          "Login"
        ],
        "parameters": [
          {
            "name": "idRestaurant",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "400": {
            "description": "Syntax error. Username or password is incorrect"
          }
        }
      }
    },
    "/{restaurant_id}/orders": {
      "summary": "Restaurant's orders paths",
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get all restaurants orders",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter the order by being fully ready or at least one item is ready",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "ready",
                "pending",
                "served"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the orders",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "time"
              ]
            }
          },
          {
            "name": "tableID",
            "in": "query",
            "description": "Filter the orders by table ID",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/order"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID, orders' ID, querry param or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a new order",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "idTable",
            "in": "query",
            "description": "ID of the table",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "Order to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfull operation",
            "content":{
              "application/json":{
                "schema":{
                  "type":"object",
                  "properties":{
                    "orderId":{
                      "type": "integer",
                      "description": "ID of the order",
                      "example": 23
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or order not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/orders/number": {
      "summary": "Restaurant's orders paths",
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Return new number order",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "Choose the channel",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "togo",
                "eatin"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "ID to use for the order",
                  "example": 23
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID, orders' ID, querry param or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/orders/{id}": {
      "summary": "Restaurant's orders paths",
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get specific order",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the order",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "forKDS",
            "in": "query",
            "description": "Only return the food_ordered contained in the order",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID, orders' ID or querry param syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or order not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Edit an existing order",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the order",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Order to be edited",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID, orders' ID, or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or order not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete an existing order",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the order",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID or orders' ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or order not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/orders/status/{id}": {
      "summary": "Update status",
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Change the status of an ordered food",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the food_ordered's status to be changed",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or order not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/orders/next/{id}": {
      "summary": "Update status",
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Change the part to display of an order",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Order's ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID or order's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or order not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/orders/payment/{id}": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Add payment details for an order",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the order to update with payment details",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Payment details to be added to the order",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/payment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payment successfully added"
          },
          "404": {
            "description": "Order not found"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/orders/served/{id}": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Mark an order as served",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the order to mark as served",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Invalid restaurant ID or order ID"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Order not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/pos/{id}": {
      "summary": "Restaurant's POS paths",
      "get": {
        "tags": [
          "POS"
        ],
        "summary": "Get all the informations the POS needs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pos"
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/restaurants": {
      "summary": "Restaurant's informations paths",
      "get": {
        "tags": [
          "Restaurants"
        ],
        "summary": "Get all restaurant's informations",
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/restaurant"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Restaurants"
        ],
        "summary": "Create a new restaurant",
        "requestBody": {
          "description": "Restaurant to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/restaurant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SuccessfullCreation"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/restaurants/{id}": {
      "summary": "Restaurant's informations paths",
      "get": {
        "tags": [
          "Restaurants"
        ],
        "summary": "Get specific restaurant's informations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/restaurant"
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Restaurants"
        ],
        "summary": "Edit an existing restaurant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Restaurant to be edited",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/restaurant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Restaurants"
        ],
        "summary": "Delete an existing restaurant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID syntax error"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/pos_config": {
      "summary": "Restaurant's pos table configuration path",
      "get": {
        "tags": [
          "Pos Config"
        ],
        "summary": "Get the pos_config of the given restaurant",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/pos_config"
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Pos Config"
        ],
        "summary": "Create or update the pos_config of a given restaurant",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Pos config to create or update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/pos_config"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SuccessfullCreation"
          },
          "400": {
            "description": "Restaurant's ID or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/users": {
      "summary": "Restaurant's users paths",
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all restaurant's users",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "User to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SuccessfullCreation"
          },
          "400": {
            "description": "Restaurant's ID or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/users/{id}": {
      "summary": "Restaurant's users paths",
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get specific user",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Restaurant's ID or user's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or user not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Edit an existing user",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "User to be edited",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "User's ID",
                    "example": 30
                  },
                  "username": {
                    "type": "string",
                    "description": "User's username",
                    "example": "EtienneTasse"
                  },
                  "firstname": {
                    "type": "string",
                    "description": "User's firstname",
                    "example": "Etienne"
                  },
                  "lastname": {
                    "type": "string",
                    "description": "User's lastname",
                    "example": "Tasse"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID, user's ID or body syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or user not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete an existing user",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Restaurant's ID or user's ID syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Restaurant or user not found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/users/{id}/password": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Change the password of an existing user",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ChangePassword"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuccessfullOperation"
          },
          "400": {
            "description": "Old password is incorrect or syntax error"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/ping": {
      "summary": "Check if the back-end respond",
      "get": {
        "tags": [
          "Ping"
        ],
        "summary": "Check if the back-end respond",
        "responses": {
          "200": {
            "description": "Back-end is running"
          }
        }
      }
    },
    "/{restaurant_id}/kpi/averageTimeDish/{food}": {
      "summary": "KPI endpoints",
      "get": {
        "tags": [
          "KPI"
        ],
        "summary": "Get average preparation time for a specific dish",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "food",
            "in": "path",
            "description": "ID of the food to analyze",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "timeBegin",
            "in": "query",
            "description": "Start date of the analysis period (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "End date of the analysis period (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "time": {
                      "type": "object",
                      "properties": {
                        "hours": { "type": "integer", "example": 0 },
                        "minutes": { "type": "integer", "example": 0 },
                        "seconds": { "type": "integer", "example": 0 }
                      }
                    },
                    "nbrOrders": {
                      "type": "integer",
                      "description": "Total number of orders analyzed",
                      "example": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid restaurant ID, food ID, or date format"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "No orders found for this dish in the specified period"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/kpi/averageTimeAllDishes": {
      "summary": "KPI endpoints",
      "get": {
        "tags": [
          "KPI"
        ],
        "summary": "Get average preparation time for all dishes",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "timeBegin",
            "in": "query",
            "description": "Start date of the analysis period (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "End date of the analysis period (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "breakdown",
            "in": "query",
            "description": "Whether to breakdown the results by food (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "food": {
                        "type": "integer",
                        "description": "ID of the dish",
                        "example": 123
                      },
                      "time": {
                        "type": "object",
                        "properties": {
                          "hours": { "type": "integer", "example": 0 },
                          "minutes": { "type": "integer", "example": 15 },
                          "seconds": { "type": "integer", "example": 0 }
                        }
                      },
                      "nbrOrders": {
                        "type": "integer",
                        "description": "Total number of orders analyzed for this dish",
                        "example": 50
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid restaurant ID or date format"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "No orders found for any dish in the specified period"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/kpi/averageOrders": {
      "summary": "KPI endpoints",
      "get": {
        "tags": [
          "KPI"
        ],
        "summary": "Get the average time for orders to be served in a restaurant",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "timeBegin",
            "in": "query",
            "description": "Start date of the analysis period (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "End date of the analysis period (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "Channel type to filter orders (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": ["togo", "eatin", "LAD"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "time": {
                      "type": "object",
                      "properties": {
                        "hours": { "type": "integer", "example": 0 },
                        "minutes": { "type": "integer", "example": 42 },
                        "seconds": { "type": "integer", "example": 8 }
                      }
                    },
                    "nbrOrders": {
                      "type": "integer",
                      "description": "Total number of orders analyzed",
                      "example": 50
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid restaurant ID or date format"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "No orders found in the specified period"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/kpi/popularDish": {
      "summary": "KPI endpoints",
      "get": {
        "tags": [
          "KPI"
        ],
        "summary": "Retrieve the most popular dish over a given period",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "Restaurant ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "timeBegin",
            "in": "query",
            "description": "Start date of the analysis period (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "End date of the analysis period (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Most popular dish returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "food": {
                      "type": "integer",
                      "description": "ID of the most ordered dish",
                      "example": 123
                    },
                    "nbrOrders": {
                      "type": "integer",
                      "description": "Total number of orders for this dish",
                      "example": 100
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "No dishes ordered in the specified period"
          },
          "5XX": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/kpi/clientsCount": {
      "summary": "KPI endpoints",
      "get": {
        "tags": [
          "KPI"
        ],
        "summary": "Get the number of clients for a specific period",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "timeBegin",
            "in": "query",
            "description": "Start date of the analysis period (optional, format: YYYY-MM-DD)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "End date of the analysis period (optional, format: YYYY-MM-DD)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The channel of the orders (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": ["togo", "eatin", "LAD"]
            }
          },
          {
            "name": "served",
            "in": "query",
            "description": "Whether the orders are served (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "The number of clients for the specified period",
                  "example": 100
                }
              }
            }
          },
          "400": {
            "description": "Invalid restaurant ID or date format"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/kpi/dishForecast": {
      "summary": "KPI endpoints",
      "get": {
        "tags": [
          "KPI"
        ],
        "summary": "Daily sales forecast for each dish",
        "description": "Returns, for each dish, a forecast of the number of sales per day over the analyzed period. The target date is optional and allows for a forecast for a specific day.",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Target date in ISO format (optional, e.g., 2025-05-28T20:58:53.621Z)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales forecast by dish",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "food": {
                        "type": "integer",
                        "description": "ID of the dish"
                      },
                      "forecast": {
                        "type": "number",
                        "description": "Forecast of the number of sales per day"
                      }
                    }
                  }
                },
                "examples": {
                  "Forecast": {
                    "value": [
                      { "food": 12, "forecast": 15 },
                      { "food": 13, "forecast": 8 }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters (restaurant ID or date)"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "No orders found for a dish"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/kpi/averageBasket": {
      "summary": "KPI endpoints",
      "get": {
        "tags": [
          "KPI"
        ],
        "summary": "Get the average basket value for a specific period",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "timeBegin",
            "in": "query",
            "description": "Start date of the analysis period (optional, format: YYYY-MM-DD)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "End date of the analysis period (optional, format: YYYY-MM-DD)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "channel",
            "in": "query",
            "description": "The channel of the orders (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": ["togo", "eatin", "LAD"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Average value": {
                      "type": "number",
                      "format": "float",
                      "description": "The average basket value"
                    },
                    "Nbr orders": {
                      "type": "integer",
                      "description": "The number of orders included in the average"
                    }
                  },
                  "example": {
                    "Average value": 23,
                    "Nbr orders": 26
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid restaurant ID or date format"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/kpi/ingredientForecast": {
      "get": {
        "tags": [
          "KPI"
        ],
        "summary": "Ingredient needs forecast for a day",
        "description": "Returns, for each ingredient, the total quantity required based on the sales forecast for each dish for the target day.",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "required": true,
            "description": "Restaurant ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "date",
            "in": "query",
            "required": false,
            "description": "Target date in ISO format (e.g., 2025-05-28T20:58:53.621Z)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "useCase",
            "in": "query",
            "description": "specific return for POS or KDS",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "POS"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ingredient needs forecast",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                        "type": "integer",
                        "description": "Ingredient ID",
                        "example": 12
                        },
                        "name": {
                        "type": "string",
                        "description": "Ingredient name",
                        "example": "Steak"
                        },
                        "quantity": {
                        "type": "number",
                        "description": "Total quantity required",
                        "example": 42
                        },
                        "unit": {
                        "type": "string",
                        "description": "Ingredient unit",
                        "example": "Slice"
                        }
                      }
                    }
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                        "type": "integer",
                        "description": "Ingredient ID",
                        "example": 12
                        },
                        "quantity": {
                        "type": "number",
                        "description": "Total quantity required",
                        "example": 42
                        }
                      }
                    }
                  }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters (restaurant ID or date)"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "No forecast found"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/kpi/displayKpi": {
      "summary": "KPI endpoints",
      "get": {
        "tags": [
          "KPI"
        ],
        "summary": "Retrieve KPIs for a specific use case (POS or KDS)",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "Restaurant ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "useCase",
            "in": "query",
            "description": "Use case (POS or KDS)",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["POS", "KDS"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "KPIs for the requested use case",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "ordersInProgress": { "type": "integer", "description": "Number of orders in progress" },
                        "clientsCount": { "type": "integer", "description": "Number of clients on site today" },
                        "averageWaitingTime1h": { "type": "object", "description": "Average waiting time over 1h", "properties": { "hours": { "type": "integer" }, "minutes": { "type": "integer" }, "seconds": { "type": "integer" } } },
                        "averageWaitingTime15m": { "type": "object", "description": "Average waiting time over 15min", "properties": { "hours": { "type": "integer" }, "minutes": { "type": "integer" }, "seconds": { "type": "integer" } } },
                        "averagePrepTime1h": { "type": "object", "description": "Average preparation time over 1h", "properties": { "hours": { "type": "integer" }, "minutes": { "type": "integer" }, "seconds": { "type": "integer" } } },
                        "averagePrepTime15m": { "type": "object", "description": "Average preparation time over 15min", "properties": { "hours": { "type": "integer" }, "minutes": { "type": "integer" }, "seconds": { "type": "integer" } } }
                      },
                      "example": {
                        "ordersInProgress": 100,
                        "clientsCount": 100,
                        "averageWaitingTime1h": { "hours": 0, "minutes": 10, "seconds": 0 },
                        "averageWaitingTime15m": { "hours": 0, "minutes": 8, "seconds": 30 },
                        "averagePrepTime1h": { "hours": 0, "minutes": 12, "seconds": 0 },
                        "averagePrepTime15m": { "hours": 0, "minutes": 9, "seconds": 45 }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "last15mOrders": { "type": "integer", "description": "Number of orders over the last 15 minutes" },
                        "clientsCount": { "type": "integer", "description": "Number of clients on site today" },
                        "averageWaitingTime1h": { "type": "object", "description": "Average waiting time over 1h", "properties": { "hours": { "type": "integer" }, "minutes": { "type": "integer" }, "seconds": { "type": "integer" } } },
                        "averageWaitingTime15m": { "type": "object", "description": "Average waiting time over 15min", "properties": { "hours": { "type": "integer" }, "minutes": { "type": "integer" }, "seconds": { "type": "integer" } } },
                        "averagePrepTime1h": { "type": "object", "description": "Average preparation time over 1h", "properties": { "hours": { "type": "integer" }, "minutes": { "type": "integer" }, "seconds": { "type": "integer" } } },
                        "averagePrepTime15m": { "type": "object", "description": "Average preparation time over 15min", "properties": { "hours": { "type": "integer" }, "minutes": { "type": "integer" }, "seconds": { "type": "integer" } } }
                      },
                      "example": {
                        "last15mOrders": 20,
                        "clientsCount": 100,
                        "averageWaitingTime1h": { "hours": 0, "minutes": 10, "seconds": 0 },
                        "averageWaitingTime15m": { "hours": 0, "minutes": 8, "seconds": 30 },
                        "averagePrepTime1h": { "hours": 0, "minutes": 12, "seconds": 0 },
                        "averagePrepTime15m": { "hours": 0, "minutes": 9, "seconds": 45 }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/{restaurant_id}/kpi/ordersCount": {
      "get": {
        "tags": ["KPI"],
        "summary": "Count the number of orders in a given interval, with optional grouping by time slot.",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "ID of the restaurant",
            "required": true,
            "schema": { "type": "integer" }
          },
          {
            "name": "timeBegin",
            "in": "query",
            "description": "Start date/time of the interval (ISO 8601)",
            "required": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "End date/time of the interval (ISO 8601)",
            "required": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "breakdown",
            "in": "query",
            "description": "Slot duration in minutes for grouping (optional)",
            "required": false,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns either the total number of orders, or an object grouped by time slot.",
            "content": {
              "application/json": {
                "examples": {
                  "Grouped": {
                    "value": { "00:00": 5, "00:15": 8 }
                  },
                  "Total": {
                    "value": 23
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid parameters" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "5XX": { "$ref": "#/components/responses/ServerError" }
        },
        "security": [{ "BearerAuth": [] }]
      }
    },
    "/{restaurant_id}/kpi/revenues": {
      "summary": "KPI Endpoints",
      "get": {
        "tags": [
          "KPI"
        ],
        "summary": "Retrieve Revenues for a Specific Period",
        "description": "Returns revenues and the number of orders for a given period. If the breakdown parameter is provided, the data is segmented by time slots. The averageWaitingTime field only appears if useCase is defined.",
        "parameters": [
          {
            "name": "restaurant_id",
            "in": "path",
            "description": "Restaurant ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "timeBegin",
            "in": "query",
            "description": "Start date of the analysis period (format: YYYY-MM-DD)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeEnd",
            "in": "query",
            "description": "End date of the analysis period (format: YYYY-MM-DD)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "breakdown",
            "in": "query",
            "description": "Duration in minutes for segmenting data by time slots (optional)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "example": 15
            }
          },
          {
            "name": "useCase",
            "in": "query",
            "description": "Use case (POS or KDS) - if defined, includes averageWaitingTime in the response",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": ["statsPOS"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Revenues for the requested period",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "Response without breakdown",
                      "properties": {
                        "revenues": {
                          "type": "number",
                          "description": "Total revenue amount",
                          "example": 0
                        },
                        "ordersCount": {
                          "type": "integer",
                          "description": "Total number of orders",
                          "example": 50
                        },
                        "averageWaitingTime": {
                          "type": "object",
                          "description": "Average waiting time (only present if useCase is defined)",
                          "properties": {
                            "hours": { "type": "integer", "example": 0 },
                            "minutes": { "type": "integer", "example": 15 },
                            "seconds": { "type": "integer", "example": 30 }
                          }
                        }
                      },
                      "example": {
                        "revenues": 0,
                        "ordersCount": 50,
                        "averageWaitingTime": { "hours": 0, "minutes": 15, "seconds": 30 }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Response with breakdown by time slots",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "revenues": {
                            "type": "number",
                            "description": "Revenue amount for this slot",
                            "example": 0
                          },
                          "ordersCount": {
                            "type": "integer",
                            "description": "Number of orders for this slot",
                            "example": 5
                          },
                          "averageWaitingTime": {
                            "type": "object",
                            "description": "Average waiting time for this slot (only present if useCase is defined)",
                            "properties": {
                              "hours": { "type": "integer", "example": 0 },
                              "minutes": { "type": "integer", "example": 12 },
                              "seconds": { "type": "integer", "example": 45 }
                            }
                          }
                        }
                      },
                      "example": {
                        "12:00": {
                          "revenues": 0,
                          "ordersCount": 5,
                          "averageWaitingTime": { "hours": 0, "minutes": 12, "seconds": 45 }
                        },
                        "12:15": {
                          "revenues": 0,
                          "ordersCount": 3,
                          "averageWaitingTime": { "hours": 0, "minutes": 10, "seconds": 30 }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters (restaurant ID or date format)"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "5XX": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "payment": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["cash", "cb", "tr"]
                },
                "value": {
                  "type": "string",
                  "example": "20"
                }
              }
            }
          },
          "discount": {
            "type": "number",
            "example": "0"
          },
          "user": {
            "type": "number",
            "example": "1"
          }
        }
      },
      "restaurant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Restaurant's ID",
            "readOnly": true,
            "example": 12
          },
          "name": {
            "type": "string",
            "description": "Restaurant's name",
            "example": "Le resto des copains"
          },
          "location": {
            "type": "string",
            "description": "Restaurant's location",
            "example": "Rue de l'amitié"
          },
          "ingredients": {
            "type": "array",
            "description": "Restaurant's ingredients",
            "items": {
              "$ref": "#/components/schemas/ingredients"
            }
          },
          "details": {
            "type": "array",
            "description": "Restaurant's details",
            "items": {
              "$ref": "#/components/schemas/details"
            }
          },
          "food_category": {
            "type": "array",
            "description": "Restaurant's food categories",
            "items": {
              "$ref": "#/components/schemas/food_category"
            }
          },
          "food": {
            "type": "array",
            "description": "Restaurant's dishes",
            "items": {
              "$ref": "#/components/schemas/food"
            }
          },
          "orders": {
            "type": "array",
            "description": "Restaurant's orders",
            "items": {
              "$ref": "#/components/schemas/order"
            }
          },
          "users": {
            "type": "array",
            "description": "Restaurant's users",
            "items": {
              "$ref": "#/components/schemas/user"
            }
          }
        },
        "description": "Restaurant content"
      },
      "pos_config": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer",
            "description": "Pos screen width on table config save",
            "example": 1920
          },
          "height": {
            "type": "integer",
            "description": "Pos screen height on table config save",
            "example": 832
          },
          "tables": {
            "type": "array",
            "description": "Restaurant's pos config tables",
            "items": {
              "$ref": "#/components/schemas/table"
            }
          }
        },
        "description": "Restaurant pos table configuration"
      },
      "table": {
        "type": "object",
        "properties": {
          "x": {
            "type": "integer",
            "description": "X position of the table on the pos screen",
            "example": 500
          },
          "y": {
            "type": "integer",
            "description": "Y position of the table on the pos screen",
            "example": 366
          },
          "name": {
            "type": "string",
            "description": "Name of the table",
            "example": "42"
          },
          "type": {
            "type": "string",
            "description": "Type of the table for front rendering",
            "example": "square"
          },
          "plates": {
            "type": "integer",
            "description": "Number of plates on the table",
            "example": 2
          },
          "time": {
            "type": "string",
            "description": "Time since last order on the table",
            "example": "00:00"
          },
          "fused": {
            "type": "array",
            "description": "table fused array",
            "items": {
              "$ref": "#/components/schemas/table"
            }
          }
        },
        "description": "Restaurant pos config table"
      },
      "user": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "User's ID",
            "readOnly": true,
            "example": 30
          },
          "username": {
            "type": "string",
            "description": "User's username",
            "example": "EtienneTasse"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "password123",
            "writeOnly": true
          },
          "firstname": {
            "type": "string",
            "description": "User's firstname",
            "example": "Etienne"
          },
          "lastname": {
            "type": "string",
            "description": "User's lastname",
            "example": "Tasse"
          }
        }
      },
      "food_ordered": {
        "type": "object",
        "properties": {
          "food": {
            "type": "integer",
            "description": "Food's ID",
            "readOnly": true,
            "example": 4
          },
          "mods_ingredients": {
            "type": "array",
            "description": "Modifications required for an ingredient",
            "items": {
              "$ref": "#/components/schemas/food_ordered_mod_ingredients"
            }
          },
          "details": {
            "type": "array",
            "description": "Food ordered's details",
            "items": {
              "type": "string",
              "description": "Details in plain text",
              "example": "Medium rare"
            }
          },
          "is_ready": {
            "type": "boolean",
            "description": "Is the food ordered's ready"
          },
          "note": {
            "type": "string",
            "description": "Note added to the food ordered",
            "example": "Fries without salt"
          },
          "price": {
            "type": "string",
            "description": "The price of the food",
            "example": "1"
          }
        }
      },
      "food": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Food's ID",
            "readOnly": true,
            "example": 12
          },
          "id_category": {
            "type": "integer",
            "description": "Food's category ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Food's name",
            "example": "Burger sympa"
          },
          "price": {
            "type": "number",
            "description": "Food's price",
            "format": "float",
            "example": 12.99
          },
          "ingredients": {
            "type": "array",
            "description": "Food's ingredients",
            "example": [
              12,
              30,
              3
            ],
            "items": {
              "type": "integer",
              "description": "Ingredient's ID"
            }
          },
          "details": {
            "type": "array",
            "description": "Food's details to be prompted when the food is ordered",
            "items": {
              "type": "integer",
              "description": "Detail's ID"
            }
          }
        }
      },
      "order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Order's ID",
            "readOnly": true,
            "example": 23
          },
          "food_ordered": {
            "type": "array",
            "description": "Order's ordered foods",
            "items": {
              "$ref": "#/components/schemas/food_ordered"
            }
          },
          "date": {
            "type": "string",
            "description": "Date and time where the order was first places",
            "format": "date-time",
            "example": "2017-07-21T17:32:28Z"
          },
          "channel": {
            "type": "string",
            "description": "Channel where the order was placed",
            "enum": [
              "Sur place",
              "A emporter",
              "LAD"
            ]
          },
          "number": {
            "type": "string",
            "description": "Written order number",
            "example": "Table 42"
          },
          "part": {
            "type": "integer",
            "description": "Part of the order to display",
            "example": 1
          },
          "served": {
            "type": "boolean",
            "description": "Is the order served",
            "example": false
          }
        }
      },
      "details": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Detail's ID",
            "readOnly": true,
            "example": 3
          },
          "name": {
            "type": "string",
            "description": "Detail's name",
            "example": "Cuisson"
          },
          "data": {
            "type": "array",
            "description": "List of the available detail's options",
            "items": {
              "$ref": "#/components/schemas/details_data"
            }
          }
        }
      },
      "ingredients": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Ingredient's ID",
            "readOnly": true,
            "example": 12
          },
          "name": {
            "type": "integer",
            "description": "Ingredient's name"
          },
          "price": {
            "type": "number",
            "description": "Ingredient's indidual price",
            "format": "float",
            "example": 0.45
          },
          "quantity": {
            "type": "integer",
            "description": "Ingredient's current quantity in stock",
            "example": 210
          },
          "unit": {
            "type": "string",
            "description": "Unit used to quantify the ingredient",
            "example": "Slice",
            "enum": [
              "tbd"
            ]
          }
        }
      },
      "food_category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Food category's ID",
            "readOnly": true,
            "example": 2
          },
          "name": {
            "type": "string",
            "description": "Food category's name",
            "example": "Soft drinks"
          }
        }
      },
      "pos": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/pos_inner"
        }
      },
      "inline_response_200": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          }
        }
      },
      "inline_response_200_1": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/food"
          },
          {
            "type": "object",
            "properties": {
              "_id": {
                "type": "integer",
                "description": "MongoDB's ID //To be removed",
                "example": 1289830281302
              },
              "food_ordered": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/food_ordered"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "food_ordered's ID",
                          "example": 23
                        },
                        "name": {
                          "type": "string",
                          "description": "food_ordered's name",
                          "example": "Boisson du champion"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "food_ordered_mod_ingredients": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of modification",
            "enum": [
              "DEL",
              "ADD",
              "ALE"
            ]
          },
          "ingredient": {
            "type": "string",
            "description": "Ingredient's to modify",
            "example": "Eggs"
          }
        }
      },
      "details_data": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of option. If the option refered to another food, use \"food\", else use \"text\" for a manual text entry",
            "enum": [
              "text",
              "food"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of option. If the data type is \"food\", use the food's ID",
            "example": "saignant"
          }
        }
      },
      "pos_inner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Food_category ID",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Food_category name",
            "example": "Soft drinks"
          },
          "food": {
            "type": "array",
            "description": "Foods in this category",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Food's ID",
                  "example": 5
                },
                "name": {
                  "type": "string",
                  "description": "Food's name",
                  "example": "Burger du gourmand"
                },
                "id_category": {
                  "type": "integer",
                  "description": "Category where the food is stored",
                  "example": 1
                },
                "price": {
                  "type": "number",
                  "description": "Food's price",
                  "format": "float",
                  "example": 12.99
                },
                "details": {
                  "type": "array",
                  "description": "Details available for the food",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Detail's ID",
                        "example": 12
                      },
                      "name": {
                        "type": "string",
                        "description": "Detail's name",
                        "example": "Cuisson"
                      },
                      "mutlipe": {
                        "type": "boolean",
                        "description": "Can the user choose multiple details?",
                        "example": false
                      },
                      "data": {
                        "type": "array",
                        "description": "Details' options",
                        "example": [
                          "Saignant",
                          "À point",
                          "Bien cuit"
                        ],
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "ingredients": {
                  "type": "array",
                  "description": "Ingredients in the food",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Ingredient's ID",
                        "example": 23
                      },
                      "name": {
                        "type": "string",
                        "description": "Ingredient's name",
                        "example": "Steak"
                      },
                      "price": {
                        "type": "number",
                        "description": "Ingredient's price",
                        "format": "float",
                        "example": 0.23
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Food categories containing foods"
      }
    },
    "requestBodies": {
      "ChangePassword": {
        "description": "Change the password of an existing user",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "oldPassword": {
                  "type": "string",
                  "description": "User's old password",
                  "example": "123456"
                },
                "newPassword": {
                  "type": "string",
                  "description": "User's new password",
                  "example": "654321"
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "SuccessfullOperation": {
        "description": "Successfull operation"
      },
      "SuccessfullCreation": {
        "description": "Successfully created"
      },
      "BadRequest": {
        "description": "Request syntax is incorrect"
      },
      "Unauthorized": {
        "description": "Unauthorized to access the ressource. Client must be logged"
      },
      "NotFound": {
        "description": "Ressource not found"
      },
      "ServerError": {
        "description": "Unexpected error"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}